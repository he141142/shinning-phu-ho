/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/uuKa8cBifHM
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/drake_libs/ui/input"
import { Button } from "@/components/drake_libs/ui/button"
import { Card, CardHeader, CardContent } from "@/components/drake_libs/ui/card"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/drake_libs/ui/dialog"
import { Label } from "@/components/drake_libs/ui/label"
import { Textarea } from "@/components/drake_libs/ui/textarea"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/drake_libs/ui/select"

export function FeedbackList() {
  const [messages, setMessages] = useState([
    {
      student: "John Doe",
      grades: "A, B, C",
      behavior: "Excellent",
      progress: "On track",
      feedback: "positive",
      message: "John is doing great in all his classes. Keep up the good work!",
    },
    {
      student: "Jane Smith",
      grades: "B, C, D",
      behavior: "Needs improvement",
      progress: "Falling behind",
      feedback: "negative",
      message:
        "Jane is struggling in a few subjects and needs to focus more in class. Please schedule a meeting to discuss.",
    },
    {
      student: "Michael Johnson",
      grades: "A, A, A",
      behavior: "Exemplary",
      progress: "Exceeding expectations",
      feedback: "positive",
      message: "Michael is excelling in all areas. We are very proud of his achievements.",
    },
    {
      student: "Emily Davis",
      grades: "B, B, C",
      behavior: "Satisfactory",
      progress: "On track",
      feedback: "neutral",
      message: "Emily is doing well overall. Let me know if you have any concerns.",
    },
  ])


  const [templates, setTemplates] = useState([
    {
      title: "Positive Feedback",
      message:
        "Your child is doing an excellent job in my class. They are engaged, hardworking, and a pleasure to have in the classroom.",
    },
    {
      title: "Needs Improvement",
      message:
        "I have noticed your child is struggling in a few areas. Please schedule a meeting so we can discuss ways to help them improve.",
    },
    {
      title: "Behavior Concerns",
      message:
        "I wanted to reach out about some behavior concerns I have noticed in class. Your child has been disruptive and not following instructions. Let's work together to address this issue.",
    },
  ])


  const [filterBy, setFilterBy] = useState("all")
  const [searchTerm, setSearchTerm] = useState("")
  const filteredMessages = useMemo(() => {
    return messages.filter((message) => {
      if (filterBy === "all") return true
      if (filterBy === "student") return message.student.toLowerCase().includes(searchTerm.toLowerCase())
      if (filterBy === "date") return true
    })
  }, [messages, filterBy, searchTerm])


  return (
    <div className="flex flex-col h-full bg-slate-400 ">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <h1 className="text-2xl font-bold">Parent-Teacher Communication Portal</h1>
      </header>
      <main className="flex-1 p-6">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center gap-4">
            <Label htmlFor="student">Student</Label>
            <Select value={filterBy} onValueChange={(e)=>{
              setFilterBy(e)
            }}>
              <SelectTrigger>
                <SelectValue placeholder="Select a filter" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Messages</SelectItem>
                <SelectItem value="student">Filter by Student</SelectItem>
                <SelectItem value="date">Filter by Date</SelectItem>
              </SelectContent>
            </Select>

      
            {filterBy === "student" && (
              <Input
                type="text"
                placeholder="Search by student name"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            )}
          </div>
          <div>
            <Dialog>
              <DialogTrigger asChild>
                <Button>Create Message Template</Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                  <DialogTitle>Create Message Template</DialogTitle>
                  <DialogDescription>Save a message template to easily send to parents.</DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="grid items-center grid-cols-4 gap-4">
                    <Label htmlFor="template-title" className="text-right">
                      Title
                    </Label>
                    <Input id="template-title" className="col-span-3" />
                  </div>
                  <div className="grid items-start grid-cols-4 gap-4">
                    <Label htmlFor="template-message" className="text-right">
                      Message
                    </Label>
                    <Textarea id="template-message" className="col-span-3" />
                  </div>
                </div>
                <DialogFooter>
                  <Button type="submit">Save Template</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>

        </div>
        <div className="grid gap-4">
          {filteredMessages.map((message, index) => (
            <Card
              key={index}
              className={`border-l-4 ${message.feedback === "positive"
                ? "border-green-500"
                : message.feedback === "negative"
                  ? "border-red-500"
                  : "border-gray-400"
                }`}
            >
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="font-bold">{message.student}</div>
                  <div className="text-sm text-muted-foreground">Grades: {message.grades}</div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="text-muted-foreground">Behavior: {message.behavior}</div>
                  <div className="text-muted-foreground">Progress: {message.progress}</div>
                </div>
                <p className="mt-4">{message.message}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>

    </div>
  )
}
